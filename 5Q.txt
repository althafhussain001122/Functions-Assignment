Here’s how you can create a JavaScript function called factorial that calculates the factorial of a non-negative integer using recursion. I’ll also demonstrate how to test the function with different inputs.

Function Declaration:

The factorial function takes one parameter, n, which is expected to be a non-negative integer.
Input Validation:

If n is less than 0, the function returns an error message indicating that the input is invalid.
Base Case:

The base case for the recursion is when n is 0 or 1. In both cases, the factorial is 1.
Recursive Case:

For any other positive integer n, the function calls itself with the argument n - 1 and multiplies the result by n. This continues until it reaches the base case.
Testing the Function:

The function is tested with various inputs: 5, 0, 1, 10, and -3 to demonstrate its functionality and error handling.

PROGRAM:

// Function to calculate the factorial of a non-negative integer using recursion
function factorial(n) {
    // Check for invalid input
    if (n < 0) {
        return "Invalid input. Please enter a non-negative integer.";
    }
    // Base case: factorial of 0 and 1 is 1
    if (n === 0 || n === 1) {
        return 1;
    }
    // Recursive case
    return n * factorial(n - 1);
}

// Test the function with different inputs
console.log(factorial(5));  // Output: 120
console.log(factorial(0));  // Output: 1
console.log(factorial(1));  // Output: 1
console.log(factorial(10)); // Output: 3628800
console.log(factorial(-3)); // Output: Invalid input. Please enter a non-negative integer.

OUTPUT:

120
1
1
3628800
Invalid input. Please enter a non-negative integer.